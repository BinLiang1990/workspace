package cn.vobile.opm.dbsync.service;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.json.JSONArray;
import org.json.JSONObject;

import cn.vobile.opm.dbsync.dao.OpmUserDAO;

public class UsersRepository implements Runnable {

	private String host;
	private String port;
	private int timeout;
	@Resource
	private OpmUserDAO opmUserDAO;

	public void syncUsers() {
		String url = "http://" + host + ":" + port
				+ "/opm_web_shell/GetAllUsersAction.action";
		try {
			HttpURLConnection httpUrlConnection = (HttpURLConnection) new URL(
					url).openConnection();
			httpUrlConnection.setConnectTimeout(1000 * 60);
			httpUrlConnection.setReadTimeout(1000 * 60);
			httpUrlConnection.setDoOutput(true);
			httpUrlConnection.setDoInput(true);
			httpUrlConnection.setUseCaches(false);
			httpUrlConnection.setRequestProperty("Content-type",
					"application/x-java-serialized-object");
			httpUrlConnection.setRequestMethod("POST");
			httpUrlConnection.connect();
			OutputStream outStrm = httpUrlConnection.getOutputStream();
			ObjectOutputStream objOutputStrm = new ObjectOutputStream(outStrm);
			objOutputStrm.writeObject(new String("我是客户端"));
			objOutputStrm.flush();
			objOutputStrm.close();
			InputStream inStrm = httpUrlConnection.getInputStream();
			ObjectInputStream objInputStrm = new ObjectInputStream(inStrm);
			String string = (String) objInputStrm.readObject();
			objInputStrm.close();
			JSONArray users = new JSONArray(string);
			List<Integer> serverList = new ArrayList<Integer>();
			List<Integer> clientList = opmUserDAO.selectAllUsersId();
			Map<Integer, JSONObject> serverMap = new HashMap<Integer, JSONObject>();
			for (int i = 0; i < users.length(); ++i) {
				serverList.add(users.getJSONObject(i).getInt("id"));
				serverMap.put(users.getJSONObject(i).getInt("id"),
						users.getJSONObject(i));
			}
			serverList.removeAll(clientList);
			for (int i = 0; i < clientList.size(); ++i) {
				JSONObject user = serverMap.get(clientList.get(i));
				opmUserDAO.updateOpmuser(user.getInt("id"),
						user.getString("userid"), user.getString("passwd"),
						user.getInt("is_enabled"), user.getString("usergroup"),
						user.getString("username"), user.getString("phone"),
						user.getString("note"));
			}
			for (int i = 0; i < serverList.size(); ++i) {
				JSONObject user = serverMap.get(serverList.get(i));
				opmUserDAO.insertOpmuser(user.getInt("id"),
						user.getString("userid"), user.getString("passwd"),
						user.getInt("is_enabled"), user.getString("usergroup"),
						user.getString("username"), user.getString("phone"),
						user.getString("note"));
			}
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void run() {
		syncUsers();
		try {
			Thread.sleep(1000 * 60 * timeout);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public String getHost() {
		return host;
	}

	public void setHost(String host) {
		this.host = host;
	}

	public String getPort() {
		return port;
	}

	public void setPort(String port) {
		this.port = port;
	}

	public int getTimeout() {
		return timeout;
	}

	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

}
