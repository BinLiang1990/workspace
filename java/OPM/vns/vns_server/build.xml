<?xml version="1.0"?>
<project name="Vobile Notification Service" basedir="." default="tar">
	<property name="appName" value="vns_server" />
	<property name="moduleName" value="vns_server" />

	<property name="webContentDir" value="WebContent" />
	<property name="buildDir" value="${basedir}/build" />
	<property name="libDir" value="${basedir}/${webContentDir}/WEB-INF/lib" />
	<property name="javaSourceDir" value="${basedir}/src" />
	<property name="testDir" value="${basedir}/test" />
	<property name="config" value="${basedir}/config" />
	<property name="tomcatDir" value="/usr/share/java" />

	<!-- This may get overridden when we are called from Anthill. -->
	<property name="version" value="1.0.0.0" />
    <property name="deployDir" value="${basedir}" />
	<property name="classDir" value="${buildDir}/classes" />
	<property name="distDir" value="${deployDir}/dist" />
	<property name="junitDir" value="${deployDir}/JUnit" />
	<property name="javadocDir" value="${deployDir}/apidoc" />
	<property name="packageName" value="${moduleName}_v${version}" />
	<property name="packageDir" value="${distDir}/${packageName}" />

	<target name="init">
		<!-- Create the directories where we put all the build products. -->
		<mkdir dir="${buildDir}" />
		<mkdir dir="${classDir}" />
		<mkdir dir="${distDir}" />
		<mkdir dir="${junitDir}" />
		<mkdir dir="${javadocDir}" />
		<mkdir dir="${packageDir}" />

		<path id="compileClasspath">
			<fileset dir="${libDir}" />
			<fileset dir="${tomcatDir}" />
		</path>
	</target>

	<property name="findbugs.home" value="/opt/findbugs/current" />
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		classpath="${findbugs.home}/lib/findbugs-ant.jar" />
	<target name="findbugs" depends="compile">
		<findbugs home="${findbugs.home}" output="xml" outputFile="findbugs.xml">
			<sourcePath path="${javaSourceDir}" />
			<class location="${classDir}" />
		</findbugs>
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${javaSourceDir}" destdir="${classDir}" debug="true"
			deprecation="true" source="1.5" target="1.5">
			<classpath refid="compileClasspath" />
		</javac>

		<!-- Copy files needed to run the software to destinations in the build 
			directory. I do this because I usually pull all binary files like this from 
			inside the Jar files that make up my application rather than having them 
			loose. So they need to be copied to the class dir so they get included in 
			the Jar file for the application. -->
		<copy todir="${classDir}">
			<fileset dir="${javaSourceDir}">
				<include name="**/*.gif" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.wav" />
				<include name="**/*.dtd" />
				<include name="**/*.properties" />
				<include name="**/*.xml" />
				<include name="**/*.conf" />
				<include name="**/*.ccf" />
			</fileset>
		</copy>
	</target>


	<target name="war" depends="findbugs">
		<war destfile="${packageDir}/${appName}.war" webxml="${basedir}/${webContentDir}/WEB-INF/web.xml">
			<fileset dir="${webContentDir}">
				<exclude name="WEB-INF/classes/**/*" />
			</fileset>
			<classes dir="${classDir}" />
		</war>
	</target>

	<target name="tar" depends="war" description="tar package built.">
		<copy todir="${packageDir}">
			<fileset dir="${basedir}/install">
				<include name="install/" />
			</fileset>
		</copy>

		<tar destfile="${packageDir}.tar.gz" compression="gzip" basedir="${distDir}"></tar>

		<delete dir="${packageDir}" />
		<echo message="tar package built." />
	</target>

	<target name="clean" depends="init" description="Clean all build products.">
		<delete dir="${javadocDir}" />
		<delete dir="${junitDir}" />
		<delete dir="${distDir}" />
		<delete dir="${classDir}" />
		<delete dir="${buildDir}" />
	</target>

	<path id="classpath">
		<pathelement location="${classDir}" />
		<fileset dir="${webContentDir}/WEB-INF/lib/">
			<include name="**/*.jar" />
		</fileset>
	</path>

</project>
